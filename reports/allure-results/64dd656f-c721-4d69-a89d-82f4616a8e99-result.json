{"name": "Validate AI response accuracy and semantics - eid_ar", "status": "failed", "statusDetails": {"message": "AssertionError: [eid_ar] similarity 0.72 facts 1/3\nassert False", "trace": "logged_in_page = <Page url='https://govgpt.sandbox.dge.gov.ae/c/b82cb35e-9e37-444d-81d9-d50ba65ea1cb'>\ncase = {'golden': 'قم بتجديد بطاقة الهوية الإماراتية عبر منصة الخدمات الذكية ICP ودفع الرسوم وتقديم البيانات الحيوية إذا لزم الأمر.', 'id': 'eid_ar', 'lang': 'ar', 'must_contain': ['ICP', 'بطاقة الهوية', 'البيانات الحيوية'], ...}\n\n    @allure.epic(\"Response Accuracy and Relevance\")\n    @allure.feature(\"Response Accuracy and Relevance\")\n    @allure.story(\"Validate AI responses against golden answers and fact checks\")\n    @allure.title(\"Validate chatbot response similarity and fact coverage for all prompts - {case[id]}\")\n    @allure.description(\"\"\"\n    Objective:\n    To verify that for all prompts (English and Arabic), the AI response is similar to the golden response\n    when available, contains required factual information, and meets quality thresholds.\n    \"\"\")\n    #@pytest.mark.parametrize(\"case\", DATA.get(\"prompts\", []))\n    @pytest.mark.parametrize(\"case\", DATA.get(\"prompts\", []), ids=lambda c: c.get(\"id\", \"no-id\"))\n    def test_app_vs_golden_similarity(logged_in_page, case):\n        allure.dynamic.title(f\"Validate AI response accuracy and semantics - {case.get('id', 'no-id')}\")\n        page   = logged_in_page\n        user_q = case.get(\"user\") or case.get(\"prompt\",\"\")\n        golden = (case.get(\"golden\") or \"\").strip()  # may be empty in future\n        lang   = case.get(\"lang\",\"en\")\n        facts  = [f.lower() for f in case.get(\"must_contain\", [])]\n        base_thr = float(case.get(\"threshold\", 0.85 if lang==\"en\" else case.get(\"xl_threshold\", 0.80)))\n    \n        # Ask & capture\n        app_ans = _send_and_get_answer(page, user_q)\n    \n        # Similarity (if golden present)\n        score = None\n        if golden:\n            score = sim_xl(app_ans, golden) if lang==\"ar\" else sim_en(app_ans, golden)\n    \n        # Fact coverage\n        app_norm = _norm(app_ans)\n        hits = sum(1 for f in facts if f in app_norm) if facts else 0\n        needed = max(1, min(2, len(facts))) if facts else 0\n    \n        # Length-aware relax (only if golden exists)\n        if golden:\n            len_ratio = max(1.0, len(app_ans)/max(1,len(golden)))\n            relax = 0.10 if len_ratio >= 3.0 else (0.05 if len_ratio >= 1.8 else 0.0)\n            eff_thr = max(0.70, base_thr - relax)\n            ok = (score >= base_thr) or ((score >= eff_thr) and (hits >= needed))\n        else:\n            # No golden: require substantive answer + facts hit (when provided)\n            ok = (len(app_ans.strip()) > 50) and (hits >= needed)\n    \n        # Allure attachments\n        allure.attach(user_q, \"prompt\", allure.attachment_type.TEXT)\n        allure.attach(app_ans, \"app_answer\", allure.attachment_type.TEXT)\n        if golden:\n            allure.attach(golden, \"golden_answer\", allure.attachment_type.TEXT)\n            allure.attach(f\"{score:.3f}\", \"similarity\", allure.attachment_type.TEXT)\n            allure.attach(\n                f\"url={page.url}\\n\"\n                f\"facts_hit={hits}/{len(facts)}\\n\"\n                f\"base_thr={base_thr:.2f}\\n\"\n                f\"eff_thr={eff_thr:.2f}\\n\",\n                \"diagnostics\",\n                allure.attachment_type.TEXT\n            )\n        else:\n            allure.attach(\n                f\"url={page.url}\\n\"\n                f\"facts_hit={hits}/{len(facts)}\\n\"\n                f\"no_golden=True\\n\",\n                \"diagnostics\",\n                allure.attachment_type.TEXT\n            )\n    \n        if not ok:\n            take_screenshot(page, f\"fail_{case.get('id','case')}_fullpage\")\n            try:\n                resp_el = page.locator(\"(//div[@id='response-content-container'])[last()]\")\n                if resp_el.count():\n                    allure.attach(resp_el.screenshot(), f\"fail_{case.get('id','case')}_response\", allure.attachment_type.PNG)\n            except Exception:\n                pass\n            attach_dom(page, f\"dom_fail_{case.get('id','case')}\")\n    \n>       assert ok, (\n            f\"[{case.get('id','case')}] \"\n            + (f\"similarity {score:.2f} \" if score is not None else \"no_golden \")\n            + f\"facts {hits}/{len(facts)}\"\n        )\nE       AssertionError: [eid_ar] similarity 0.72 facts 1/3\nE       assert False\n\ntests\\genai\\test_against_golden.py:97: AssertionError"}, "description": "\nObjective:\nTo verify that for all prompts (English and Arabic), the AI response is similar to the golden response\nwhen available, contains required factual information, and meets quality thresholds.\n", "attachments": [{"name": "prompt", "source": "2fa00d79-143b-468d-927b-ff2d7bf988f5-attachment.txt", "type": "text/plain"}, {"name": "app_answer", "source": "1b6d272a-8567-484c-9611-e4915f8ad3fd-attachment.txt", "type": "text/plain"}, {"name": "golden_answer", "source": "5202406f-2a62-4399-9444-ee528fc7b1f5-attachment.txt", "type": "text/plain"}, {"name": "similarity", "source": "592dd2c3-ebfc-4259-aed6-0a6f6f3d65e5-attachment.txt", "type": "text/plain"}, {"name": "diagnostics", "source": "36bed7fb-764f-40f3-af20-c8e226f56535-attachment.txt", "type": "text/plain"}, {"name": "fail_eid_ar_fullpage", "source": "5083c701-04bf-4951-af9e-224d2601f4ef-attachment.png", "type": "image/png"}, {"name": "fail_eid_ar_response", "source": "a09058aa-7384-4706-9242-97fb6548e013-attachment.png", "type": "image/png"}, {"name": "dom_fail_eid_ar", "source": "ce886feb-f915-4771-aaa5-bd6245d36b51-attachment.html", "type": "text/html"}, {"name": "FAILED_test_app_vs_golden_similarity[eid_ar]", "source": "63b9cbee-f059-45ee-9944-acf479ba4efd-attachment.png", "type": "image/png"}, {"name": "DOM_test_app_vs_golden_similarity[eid_ar]", "source": "b9e78a7e-8ca9-4c9a-a524-6abc7f19a3d1-attachment.html", "type": "text/html"}], "parameters": [{"name": "case", "value": "{'id': 'eid_ar', 'lang': 'ar', 'user': 'كيف أجدد بطاقة الهوية الإماراتية؟', 'golden': 'قم بتجديد بطاقة الهوية الإماراتية عبر منصة الخدمات الذكية ICP ودفع الرسوم وتقديم البيانات الحيوية إذا لزم الأمر.', 'xl_threshold': 0.8, 'must_contain': ['ICP', 'بطاقة الهوية', 'البيانات الحيوية']}"}], "start": 1755618775604, "stop": 1755618805586, "uuid": "8c3454d2-be84-42ce-a82e-c2a3dd19a2da", "historyId": "71b0fa32907795e7189457aa879000aa", "testCaseId": "4351bef7262dccc0f46b030dd9a53ecd", "fullName": "tests.genai.test_against_golden#test_app_vs_golden_similarity", "labels": [{"name": "epic", "value": "Response Accuracy and Relevance"}, {"name": "feature", "value": "Response Accuracy and Relevance"}, {"name": "story", "value": "Validate AI responses against golden answers and fact checks"}, {"name": "parentSuite", "value": "tests.genai"}, {"name": "suite", "value": "test_against_golden"}, {"name": "host", "value": "LAPTOP-ITSGITUD"}, {"name": "thread", "value": "8660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.genai.test_against_golden"}]}